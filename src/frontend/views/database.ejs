<%- include('partials/header') %>

<div class="min-h-screen bg-gradient-to-b from-green-50 to-green-100 py-12 px-4 sm:px-6 lg:px-8">
    <div class="flex flex-col md:flex-row gap-6">
        <!-- Panel lateral: Explorador de archivos -->
        <div class="w-full md:w-1/3 lg:w-1/4">
            <%- include('partials/file-explorer') %>
        </div>
        
        <!-- Panel principal: Contenido original -->
        <div class="w-full md:w-2/3 lg:w-3/4">
            <div class="max-w-3xl mx-auto bg-white rounded-2xl shadow-xl overflow-hidden">
                <!-- Header Section -->
                <div class="bg-gradient-to-r from-green-400 via-green-300 to-green-400 px-6 py-8">
                    <h1 class="text-3xl font-bold text-white text-center flex items-center justify-center space-x-3">
                        <i class="fas fa-database"></i>
                        <span>NCBI Datasets Genome Downloader</span>
                    </h1>
                </div>

                <!-- Main Content -->
                <div class="p-8">
                    <!-- Download Mode Selection -->
                    <div class="mb-6">
                        <label for="downloadMode" class="block text-sm font-medium text-gray-700">Modo de descarga</label>
                        <select id="downloadMode" class="mt-2 block w-full rounded-lg border-green-200 shadow-sm focus:border-green-300 focus:ring focus:ring-green-200 focus:ring-opacity-50 bg-green-50 transition-colors duration-200">
                            <option value="accession">Número de accesión</option>
                            <option value="taxon">Nombre de taxón</option>
                            <option value="automated">Automatizada (Archivo .txt)</option>
                        </select>
                    </div>

                    <!-- Accession Input -->
                    <div id="accessionInputDiv" class="mb-6">
                        <label for="accessionInput" class="block text-sm font-medium text-gray-700">Número de accesión</label>
                        <input id="accessionInput" type="text" placeholder="Ejemplo: GCF_000005825.2" class="mt-2 block w-full rounded-lg border-green-200 shadow-sm focus:border-green-300 focus:ring focus:ring-green-200 focus:ring-opacity-50 bg-green-50 transition-colors duration-200" />
                    </div>

                    <!-- Taxon Input -->
                    <div id="taxonInputDiv" class="mb-6" style="display: none;">
                        <label for="taxonInput" class="block text-sm font-medium text-gray-700">Nombre de taxón</label>
                        <input id="taxonInput" type="text" placeholder="Ejemplo: Saccharomyces cerevisiae" class="mt-2 block w-full rounded-lg border-green-200 shadow-sm focus:border-green-300 focus:ring focus:ring-green-200 focus:ring-opacity-50 bg-green-50 transition-colors duration-200" />
                    </div>

                    <!-- File Upload -->
                    <div id="fileUploadDiv" class="mb-6" style="display: none;">
                        <label for="fileUpload" class="block text-sm font-medium text-gray-700">Suba un archivo .txt con múltiples accesiones</label>
                        <div class="flex items-center mt-2">
                            <input id="fileUpload" type="file" accept=".txt" class="hidden" />
                            <button type="button" onClick="document.getElementById('fileUpload').click()" class="inline-flex items-center px-4 py-2 rounded-lg shadow-sm text-white bg-green-500 hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors duration-200">
                                <i class="fas fa-upload mr-2"></i>
                                Subir archivo
                            </button>
                            <span id="fileName" class="ml-3 text-sm text-green-600"></span>
                        </div>
                    </div>

                    <!-- Include Options -->
                    <div class="mb-6">
                        <span class="block text-sm font-medium text-gray-700 mb-2">Opciones a incluir</span>
                        <div class="flex flex-wrap gap-2">
                            <button class="includeOption px-4 py-2 rounded-lg text-sm font-medium bg-green-500 text-white transition-all duration-200 hover:shadow-md" data-option="genome">
                                <i class="fas fa-dna mr-1"></i>genome
                            </button>
                            <button class="includeOption px-4 py-2 rounded-lg text-sm font-medium bg-gray-200 text-gray-700 transition-all duration-200 hover:shadow-md" data-option="protein">
                                <i class="fas fa-microscope mr-1"></i>protein
                            </button>
                            <button class="includeOption px-4 py-2 rounded-lg text-sm font-medium bg-gray-200 text-gray-700 transition-all duration-200 hover:shadow-md" data-option="rna">
                                <i class="fas fa-wave-square mr-1"></i>rna
                            </button>
                            <button class="includeOption px-4 py-2 rounded-lg text-sm font-medium bg-gray-200 text-gray-700 transition-all duration-200 hover:shadow-md" data-option="cds">
                                <i class="fas fa-code mr-1"></i>cds
                            </button>
                        </div>
                    </div>

                    <!-- Assembly Level -->
                    <div class="mb-8">
                        <label for="assemblyLevel" class="block text-sm font-medium text-gray-700">Nivel de ensamblaje</label>
                        <select id="assemblyLevel" class="mt-2 block w-full rounded-lg border-green-200 shadow-sm focus:border-green-300 focus:ring focus:ring-green-200 focus:ring-opacity-50 bg-green-50 transition-colors duration-200">
                            <option value="">Cualquiera</option>
                            <option value="complete">Completo</option>
                            <option value="chromosome">Cromosoma</option>
                            <option value="scaffold">Scaffold</option>
                            <option value="contig">Contig</option>
                        </select>
                    </div>

                    <!-- Download Button -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                        <button onClick="handleDownload()" class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-lg shadow-sm text-white bg-green-500 hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-200">
                            <i class="fas fa-download mr-2"></i>
                            Descargar genoma(s)
                        </button>
                        
                        <button onClick="handleExampleDownload()" class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-lg shadow-sm text-white bg-blue-500 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200">
                            <i class="fas fa-vial mr-2"></i>
                            Probar con ejemplo (E. coli)
                        </button>
                    </div>

                    <!-- Progress Bar -->
                    <div class="mt-6">
                        <progress id="progressBar" value="0" max="100" class="w-full h-2 bg-green-100 rounded-full overflow-hidden">
                            <div class="w-1/2 h-full bg-green-500"></div>
                        </progress>
                        <div id="progressText" class="text-sm text-gray-600 mt-2 text-center"></div>
                    </div>

                    <!-- Download Link -->
                    <div id="downloadLink" class="mt-4 text-center"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<footer class="bg-gray-800 text-white mt-auto">
    <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
        <p class="text-center text-sm">© 2024 FungiTG. Todos los derechos reservados.</p>
    </div>
</footer>

<script>
    let includeOptions = ['genome'];
    const apiEndpoint = 'http://localhost:4006'; // PUERTO CORRECTO

    console.log('🚀 FRONTEND INICIALIZADO');
    console.log('📡 API Endpoint:', apiEndpoint);

    document.querySelectorAll('.includeOption').forEach(button => {
        button.addEventListener('click', function() {
            console.log('🔘 Include option clicked:', this.getAttribute('data-option'));
            const option = this.getAttribute('data-option');
            if (includeOptions.includes(option)) {
                includeOptions = includeOptions.filter(o => o !== option);
                this.classList.remove('bg-green-500', 'text-white');
                this.classList.add('bg-gray-200', 'text-gray-700');
            } else {
                includeOptions.push(option);
                this.classList.remove('bg-gray-200', 'text-gray-700');
                this.classList.add('bg-green-500', 'text-white');
            }
            console.log('📋 Include options actuales:', includeOptions);
        });
    });

    document.getElementById('downloadMode').addEventListener('change', function(event) {
        console.log('🔄 Modo de descarga cambiado a:', event.target.value);
        const mode = event.target.value;
        document.getElementById('accessionInputDiv').style.display = 'none';
        document.getElementById('taxonInputDiv').style.display = 'none';
        document.getElementById('fileUploadDiv').style.display = 'none';

        if (mode === 'accession') {
            document.getElementById('accessionInputDiv').style.display = 'block';
        } else if (mode === 'taxon') {
            document.getElementById('taxonInputDiv').style.display = 'block';
        } else if (mode === 'automated') {
            document.getElementById('fileUploadDiv').style.display = 'block';
        }
    });

    document.getElementById('fileUpload').addEventListener('change', function(event) {
        const fileName = event.target.files[0]?.name || '';
        console.log('📁 Archivo seleccionado:', fileName);
        document.getElementById('fileName').textContent = fileName;
    });

    function simulateProgress() {
        console.log('⏳ Iniciando barra de progreso');
        let progressBar = document.getElementById('progressBar');
        let progressText = document.getElementById('progressText');
        let progress = 0;
        
        progressText.textContent = 'Iniciando descarga...';
        
        let interval = setInterval(() => {
            progress += 5;
            progressBar.value = progress;
            progressText.textContent = `Descargando... ${progress}%`;
            console.log('📊 Progreso:', progress + '%');
            if (progress >= 90) {
                clearInterval(interval);
                progressText.textContent = 'Finalizando...';
            }
        }, 1000);
        return interval;
    }

    function handleDownload() {
        console.log('🔥 === BOTÓN DESCARGA PRESIONADO ===');
        
        const progressInterval = simulateProgress();

        const downloadMode = document.getElementById('downloadMode').value;
        const accessionNumber = document.getElementById('accessionInput').value;
        const taxonName = document.getElementById('taxonInput').value;
        const fileInput = document.getElementById('fileUpload');
        const file = fileInput.files[0];
        const assemblyLevel = document.getElementById('assemblyLevel').value;

        console.log('📊 DATOS RECOLECTADOS:');
        console.log('  - Modo:', downloadMode);
        console.log('  - Accession:', accessionNumber);
        console.log('  - Taxón:', taxonName);
        console.log('  - Archivo:', file ? file.name : 'ninguno');
        console.log('  - Assembly Level:', assemblyLevel);
        console.log('  - Include Options:', includeOptions);

        if (downloadMode === 'accession' && !accessionNumber) {
            console.log('❌ ERROR: Falta número de accesión');
            alert('Por favor ingrese un número de accesión');
            clearInterval(progressInterval);
            return;
        }

        if (downloadMode === 'taxon' && !taxonName) {
            console.log('❌ ERROR: Falta nombre de taxón');
            alert('Por favor ingrese un nombre o ID de taxón');
            clearInterval(progressInterval);
            return;
        }

        if (downloadMode === 'automated' && !file) {
            console.log('❌ ERROR: Falta archivo .txt');
            alert('Por favor suba un archivo .txt');
            clearInterval(progressInterval);
            return;
        }

        console.log('📦 Preparando FormData...');
        const formData = new FormData();
        formData.append('downloadMode', downloadMode);
        if (accessionNumber) formData.append('accessionNumber', accessionNumber);
        if (taxonName) formData.append('taxonName', taxonName);
        if (file) formData.append('accessionFile', file);
        formData.append('assemblyLevel', assemblyLevel);
        includeOptions.forEach(option => formData.append('includeOptions[]', option));

        console.log('🚀 Enviando petición a:', `${apiEndpoint}/api/download-genomes`);

        fetch(`${apiEndpoint}/api/download-genomes`, {
            method: 'POST',
            body: formData
        })
        .then(response => {
            console.log('📨 RESPUESTA RECIBIDA:');
            console.log('  - Status:', response.status);
            console.log('  - Status Text:', response.statusText);
            console.log('  - OK:', response.ok);
            console.log('  - Headers:', response.headers);
            
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status} - ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('📄 DATOS DE RESPUESTA COMPLETOS:');
            console.log(JSON.stringify(data, null, 2));
            
            clearInterval(progressInterval);
            
            let progressBar = document.getElementById('progressBar');
            let progressText = document.getElementById('progressText');
            progressBar.value = 100;
            progressText.textContent = 'Completado';
            
            if (data.success && data.downloadId) {
                console.log('✅ DESCARGA EXITOSA');
                const downloadLinkDiv = document.getElementById('downloadLink');
                const downloadId = data.downloadId;
                
                // Verificar si hay resultados exitosos
                const successfulDownloads = data.results?.filter(r => r.status === 'success') || [];
                console.log('📋 Descargas exitosas:', successfulDownloads.length);
                
                if (successfulDownloads.length > 0) {
                    // Crear enlaces directos a los archivos ZIP
                    let downloadsHTML = '<ul class="mt-3 list-disc list-inside space-y-2">';
                    
                    successfulDownloads.forEach(download => {
                        const accessionOrTaxon = download.accession || download.taxon;
                        const zipFile = download.zipFile;
                        
                        console.log('🗂️ Archivo disponible:', accessionOrTaxon, '->', zipFile);
                        
                        if (zipFile) {
                            downloadsHTML += `
                                <li class="flex items-center">
                                    <span class="text-green-700">${accessionOrTaxon || 'Genoma'}: </span>
                                    <a href="${apiEndpoint}/api/download-file/${downloadId}/${accessionOrTaxon}/${zipFile}" 
                                       class="ml-2 text-blue-600 hover:text-blue-800 hover:underline" 
                                       download="${zipFile}">
                                       <i class="fas fa-file-archive mr-1"></i>${zipFile}
                                    </a>
                                </li>`;
                        }
                    });
                    
                    downloadsHTML += '</ul>';
                    
                    downloadLinkDiv.innerHTML = `
                        <div class="mt-4 p-4 bg-green-50 rounded-lg border border-green-200">
                            <h3 class="text-lg font-medium text-green-800 mb-2">Descarga completada</h3>
                            <p class="text-sm text-green-700 mb-3">Se han descargado ${successfulDownloads.length} genoma(s) correctamente.</p>
                            <p class="text-sm font-medium text-green-800">Haz clic en los enlaces para descargar los archivos ZIP:</p>
                            ${downloadsHTML}
                        </div>`;
                } else {
                    console.log('⚠️ No hay descargas exitosas');
                    downloadLinkDiv.innerHTML = `
                        <div class="mt-4 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                            <h3 class="text-lg font-medium text-yellow-800">Advertencia</h3>
                            <p class="text-sm text-yellow-700">No se pudieron descargar los genomas solicitados.</p>
                            <pre class="text-xs mt-2">${JSON.stringify(data.results, null, 2)}</pre>
                        </div>`;
                }
            } else {
                console.log('❌ DESCARGA FALLIDA');
                const downloadLinkDiv = document.getElementById('downloadLink');
                downloadLinkDiv.innerHTML = `
                    <div class="mt-4 p-4 bg-red-50 rounded-lg border border-red-200">
                        <h3 class="text-lg font-medium text-red-800">Error</h3>
                        <p class="text-sm text-red-700">${data.error || 'Error desconocido durante la descarga'}</p>
                        <pre class="text-xs mt-2">${JSON.stringify(data, null, 2)}</pre>
                    </div>`;
            }
        })
        .catch(error => {
            console.error('💥 ERROR EN PETICIÓN:', error);
            console.error('Stack:', error.stack);
            clearInterval(progressInterval);
            
            let progressBar = document.getElementById('progressBar');
            let progressText = document.getElementById('progressText');
            progressBar.value = 0;
            progressText.textContent = 'Error';
            
            const downloadLinkDiv = document.getElementById('downloadLink');
            downloadLinkDiv.innerHTML = `
                <div class="mt-4 p-4 bg-red-50 rounded-lg border border-red-200">
                    <h3 class="text-lg font-medium text-red-800">Error de Conexión</h3>
                    <p class="text-sm text-red-700">${error.message || 'Error desconocido durante la descarga'}</p>
                    <p class="text-xs text-red-600 mt-2">Verifica la consola del navegador y los logs del servidor.</p>
                </div>`;
        });
        
        console.log('🏁 === FIN FUNCIÓN DESCARGA ===');
    }

    function handleExampleDownload() {
        console.log('🔥 === BOTÓN EJEMPLO PRESIONADO ===');
        
        const progressInterval = simulateProgress();

        const formData = new FormData();
        formData.append('downloadMode', 'example');
        formData.append('includeOptions[]', 'genome');

        console.log('🚀 Enviando petición de ejemplo a:', `${apiEndpoint}/api/download-genomes`);

        fetch(`${apiEndpoint}/api/download-genomes`, {
            method: 'POST',
            body: formData
        })
        .then(response => {
            console.log('📨 RESPUESTA DE EJEMPLO:', response.status, response.statusText);
            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
            return response.json();
        })
        .then(data => {
            console.log('📄 DATOS DE EJEMPLO:', JSON.stringify(data, null, 2));
            clearInterval(progressInterval);
            
            let progressBar = document.getElementById('progressBar');
            let progressText = document.getElementById('progressText');
            progressBar.value = 100;
            progressText.textContent = 'Completado';
            
            // ... resto del código igual que en handleDownload ...
        })
        .catch(error => {
            console.error('💥 ERROR EN EJEMPLO:', error);
            clearInterval(progressInterval);
            // ... manejo de error ...
        });
    }

    // Inicialización del explorador de archivos cuando se carga la página
    document.addEventListener('DOMContentLoaded', function() {
        console.log('🎯 DOM COMPLETAMENTE CARGADO');
        
        // Usar la API global expuesta por el partial del explorador de archivos
        if (window.FileExplorer) {
            console.log('🗂️ Inicializando File Explorer');
            window.FileExplorer.navigateTo('raw', 'genomes');
        } else {
            console.log('⚠️ File Explorer no disponible');
        }
        
        console.log('✅ Frontend listo para usar');
    });
</script>

<%- include('partials/footer') %>