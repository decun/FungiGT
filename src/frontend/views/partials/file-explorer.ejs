<!-- Explorador de Archivos Profesional -->
<div class="bg-white rounded-lg shadow-lg border max-w-full">
    <!-- Header -->
    <div class="p-3 border-b bg-gray-50">
        <div class="flex justify-between items-center mb-2">
            <h3 class="font-semibold text-base flex items-center text-gray-800">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-600 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" />
                </svg>
                Explorador de Archivos
            </h3>
            <!-- Indicador de estado del servidor -->
            <div id="serverStatus" class="flex items-center text-xs">
                <div class="w-2 h-2 rounded-full bg-gray-400 mr-1"></div>
                <span class="text-gray-500">Conectando...</span>
            </div>
        </div>
        
        <!-- Botones de acción -->
        <div class="flex justify-center space-x-2">
            <button id="createFolderBtn" class="bg-blue-500 hover:bg-blue-600 text-white p-2 rounded-full transition-colors duration-200" title="Nueva Carpeta">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
            </button>
            <button id="uploadFileBtn" class="bg-green-500 hover:bg-green-600 text-white p-2 rounded-full transition-colors duration-200" title="Subir Archivo">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                </svg>
            </button>
            <button id="refreshBtn" class="bg-gray-500 hover:bg-gray-600 text-white p-2 rounded-full transition-colors duration-200" title="Actualizar">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
            </button>
            <button id="testConnectionBtn" class="bg-purple-500 hover:bg-purple-600 text-white p-2 rounded-full transition-colors duration-200" title="Probar Conexión">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
            </button>
        </div>
    </div>
    
    <!-- Navegación de Ruta -->
    <div class="px-3 py-2 border-b bg-gray-50">
        <div class="flex items-center space-x-2 text-xs">
            <button id="homeBtn" class="text-blue-600 hover:text-blue-800 flex items-center transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                </svg>
                data
            </button>
            <span id="breadcrumb" class="text-gray-600 truncate"></span>
        </div>
    </div>
    
    <!-- Lista de Archivos -->
    <div class="p-3">
        <div id="filesList" class="min-h-[250px] max-h-[400px] overflow-y-auto border rounded text-xs relative">
            <div class="p-6 text-center text-gray-500">
                <svg class="animate-spin h-6 w-6 mx-auto mb-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <p>Cargando archivos...</p>
            </div>
        </div>
        
        <!-- Información del archivo seleccionado -->
        <div class="mt-2 flex justify-between items-center text-xs text-gray-600">
            <span id="fileCount">0 elementos</span>
            <div id="selectedFileInfo" class="hidden truncate">
                <span id="selectedFileName" class="font-medium"></span>
                <span class="mx-1">•</span>
                <span id="selectedFileSize"></span>
            </div>
        </div>
        
        <!-- Botones de acción para archivos -->
        <div class="mt-2 flex justify-center space-x-2">
            <button id="viewFileBtn" class="bg-blue-500 hover:bg-blue-600 text-white p-1.5 rounded-full text-xs disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200" disabled title="Ver archivo">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                </svg>
            </button>
            <button id="downloadFileBtn" class="bg-green-500 hover:bg-green-600 text-white p-1.5 rounded-full text-xs disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200" disabled title="Descargar archivo">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
            </button>
            <button id="extractZipBtn" class="bg-yellow-500 hover:bg-yellow-600 text-white p-1.5 rounded-full text-xs disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200" disabled title="Extraer ZIP">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 11l3 3m0 0l3-3m-3 3V9" />
                </svg>
            </button>
            <button id="deleteFileBtn" class="bg-red-500 hover:bg-red-600 text-white p-1.5 rounded-full text-xs disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200" disabled title="Eliminar">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
            </button>
        </div>
    </div>
</div>

<!-- Input para subir archivos (oculto) -->
<input type="file" id="fileInput" class="hidden" multiple>

<!-- Menú Contextual -->
<div id="contextMenu" class="fixed bg-white border border-gray-200 rounded-lg shadow-lg py-1 z-50 hidden min-w-[180px]">
    <!-- Opciones para archivos -->
    <div id="fileContextOptions" class="hidden">
        <button class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100 flex items-center" id="contextView">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
            </svg>
            Ver archivo
        </button>
        <button class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100 flex items-center" id="contextDownload">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Descargar
        </button>
        <button class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100 flex items-center" id="contextExtractZip" style="display: none;">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 11l3 3m0 0l3-3m-3 3V9" />
            </svg>
            Extraer ZIP
        </button>
        <hr class="my-1">
    </div>
    
    <!-- Opciones para carpetas -->
    <div id="folderContextOptions" class="hidden">
        <button class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100 flex items-center" id="contextOpen">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" />
            </svg>
            Abrir carpeta
        </button>
        <hr class="my-1">
    </div>
    
    <!-- Opciones comunes -->
    <button class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100 flex items-center" id="contextCopyPath">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
        </svg>
        Copiar ruta
    </button>
    
    <button class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100 flex items-center" id="contextCopyName">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
        </svg>
        Copiar nombre
    </button>
    
    <button class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100 flex items-center" id="contextCopyFullPath">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
        </svg>
        Copiar ruta completa
    </button>
    
    <hr class="my-1">
    
    <button class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100 flex items-center" id="contextRename">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
        </svg>
        Renombrar
    </button>
    
    <button class="w-full text-left px-3 py-2 text-sm hover:bg-red-100 text-red-600 flex items-center" id="contextDelete">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
        </svg>
        Eliminar
    </button>
    
    <!-- Opciones para área vacía -->
    <div id="emptyAreaContextOptions" class="hidden">
        <hr class="my-1">
        <button class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100 flex items-center" id="contextNewFolder">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Nueva carpeta
        </button>
        <button class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100 flex items-center" id="contextUpload">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
            </svg>
            Subir archivos
        </button>
        <button class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100 flex items-center" id="contextRefresh">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            Actualizar
        </button>
    </div>
</div>

<!-- Modal para nueva carpeta -->
<div id="folderModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white p-6 rounded-lg shadow-xl max-w-md w-full mx-4">
        <h3 class="text-lg font-semibold mb-4">Crear Nueva Carpeta</h3>
        <input type="text" id="folderNameInput" class="w-full p-3 border rounded-md mb-4" placeholder="Nombre de la carpeta" maxlength="50">
        <div class="flex justify-end space-x-2">
            <button id="cancelFolderBtn" class="bg-gray-300 text-gray-800 px-4 py-2 rounded hover:bg-gray-400 transition-colors duration-200">
                Cancelar
            </button>
            <button id="createFolderConfirmBtn" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors duration-200">
                Crear
            </button>
        </div>
    </div>
</div>

<!-- Modal para renombrar -->
<div id="renameModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white p-6 rounded-lg shadow-xl max-w-md w-full mx-4">
        <h3 class="text-lg font-semibold mb-4">Renombrar</h3>
        <input type="text" id="renameInput" class="w-full p-3 border rounded-md mb-4" placeholder="Nuevo nombre" maxlength="100">
        <div class="flex justify-end space-x-2">
            <button id="cancelRenameBtn" class="bg-gray-300 text-gray-800 px-4 py-2 rounded hover:bg-gray-400 transition-colors duration-200">
                Cancelar
            </button>
            <button id="confirmRenameBtn" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors duration-200">
                Renombrar
            </button>
        </div>
    </div>
</div>

<!-- Modal para extraer ZIP -->
<div id="extractZipModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white p-6 rounded-lg shadow-xl max-w-md w-full mx-4">
        <h3 class="text-lg font-semibold mb-4">Extraer Archivo ZIP</h3>
        <div class="mb-4">
            <p class="text-sm text-gray-600 mb-3">¿Cómo deseas extraer el archivo?</p>
            <div class="space-y-2">
                <label class="flex items-center">
                    <input type="radio" name="extractOption" value="same" class="mr-2" checked>
                    <span class="text-sm">Extraer en la misma carpeta</span>
                </label>
                <label class="flex items-center">
                    <input type="radio" name="extractOption" value="folder" class="mr-2">
                    <span class="text-sm">Extraer en una nueva carpeta</span>
                </label>
            </div>
        </div>
        <div class="flex justify-end space-x-2">
            <button id="cancelExtractBtn" class="bg-gray-300 text-gray-800 px-4 py-2 rounded hover:bg-gray-400 transition-colors duration-200">
                Cancelar
            </button>
            <button id="confirmExtractBtn" class="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600 transition-colors duration-200">
                Extraer
            </button>
        </div>
    </div>
</div>

<!-- Modal para vista previa -->
<div id="previewModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] mx-4 flex flex-col">
        <div class="flex justify-between items-center p-4 border-b">
            <h3 class="text-lg font-semibold truncate" id="previewTitle">Vista previa</h3>
            <button id="closePreviewBtn" class="text-gray-500 hover:text-gray-700 transition-colors duration-200">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        <div id="previewContent" class="p-4 overflow-auto flex-grow">
            <!-- Contenido de la vista previa -->
        </div>
    </div>
</div>

<!-- Notificación de copiado -->
<div id="copyNotification" class="fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg transform translate-x-full transition-transform duration-300 z-50">
    <div class="flex items-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
        <span id="copyNotificationText">Copiado al portapapeles</span>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const FileExplorer = {
        apiUrl: 'http://localhost:4002',
        currentPath: [],
        selectedFile: null,
        serverConnected: false,
        contextMenuFile: null, // Archivo sobre el que se hizo clic derecho
        
        init: function() {
            console.log('Inicializando FileExplorer...');
            this.setupEventListeners();
            this.setupContextMenu();
            this.testConnection();
            window.FileExplorer = this; // Hacer disponible globalmente
        },
        
        setupEventListeners: function() {
            // Botones principales
            document.getElementById('createFolderBtn').addEventListener('click', () => this.showCreateFolderModal());
            document.getElementById('uploadFileBtn').addEventListener('click', () => document.getElementById('fileInput').click());
            document.getElementById('refreshBtn').addEventListener('click', () => this.loadFiles());
            document.getElementById('homeBtn').addEventListener('click', () => this.navigateToHome());
            document.getElementById('testConnectionBtn').addEventListener('click', () => this.testConnection());
            
            // Subida de archivos
            document.getElementById('fileInput').addEventListener('change', (e) => this.handleFileUpload(e.target.files));
            
            // Modal de carpeta
            document.getElementById('createFolderConfirmBtn').addEventListener('click', () => this.createFolder());
            document.getElementById('cancelFolderBtn').addEventListener('click', () => this.hideCreateFolderModal());
            document.getElementById('folderNameInput').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') this.createFolder();
            });
            
            // Modal de renombrar
            document.getElementById('confirmRenameBtn').addEventListener('click', () => this.renameFile());
            document.getElementById('cancelRenameBtn').addEventListener('click', () => this.hideRenameModal());
            document.getElementById('renameInput').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') this.renameFile();
            });
            
            // Botones de acción
            document.getElementById('viewFileBtn').addEventListener('click', () => this.viewFile());
            document.getElementById('downloadFileBtn').addEventListener('click', () => this.downloadFile());
            document.getElementById('extractZipBtn').addEventListener('click', () => this.showExtractZipModal());
            document.getElementById('deleteFileBtn').addEventListener('click', () => this.deleteFile());
            
            // Modal de vista previa
            document.getElementById('closePreviewBtn').addEventListener('click', () => this.hidePreviewModal());
            
            // Modal de extracción ZIP
            document.getElementById('confirmExtractBtn').addEventListener('click', () => this.extractZip());
            document.getElementById('cancelExtractBtn').addEventListener('click', () => this.hideExtractZipModal());
            
            // Cerrar menú contextual al hacer clic fuera
            document.addEventListener('click', (e) => {
                if (!document.getElementById('contextMenu').contains(e.target)) {
                    this.hideContextMenu();
                }
            });
        },
        
        setupContextMenu: function() {
            // Eventos del menú contextual
            document.getElementById('contextView').addEventListener('click', () => {
                this.viewFile();
                this.hideContextMenu();
            });
            
            document.getElementById('contextDownload').addEventListener('click', () => {
                this.downloadFile();
                this.hideContextMenu();
            });
            
            document.getElementById('contextOpen').addEventListener('click', () => {
                if (this.contextMenuFile && this.contextMenuFile.isDirectory) {
                    this.navigateToFolder(this.contextMenuFile.name);
                }
                this.hideContextMenu();
            });
            
            document.getElementById('contextCopyPath').addEventListener('click', () => {
                this.copyToClipboard(this.getRelativePath(), 'Ruta relativa copiada');
                this.hideContextMenu();
            });
            
            document.getElementById('contextCopyName').addEventListener('click', () => {
                if (this.contextMenuFile) {
                    this.copyToClipboard(this.contextMenuFile.name, 'Nombre copiado');
                }
                this.hideContextMenu();
            });
            
            document.getElementById('contextCopyFullPath').addEventListener('click', () => {
                this.copyToClipboard(this.getFullPath(), 'Ruta completa copiada');
                this.hideContextMenu();
            });
            
            document.getElementById('contextRename').addEventListener('click', () => {
                this.showRenameModal();
                this.hideContextMenu();
            });
            
            document.getElementById('contextDelete').addEventListener('click', () => {
                this.deleteFile();
                this.hideContextMenu();
            });
            
            // Event listener para extraer ZIP
            document.getElementById('contextExtractZip').addEventListener('click', () => {
                this.showExtractZipModal();
                this.hideContextMenu();
            });
            
            // Opciones para área vacía
            document.getElementById('contextNewFolder').addEventListener('click', () => {
                this.showCreateFolderModal();
                this.hideContextMenu();
            });
            
            document.getElementById('contextUpload').addEventListener('click', () => {
                document.getElementById('fileInput').click();
                this.hideContextMenu();
            });
            
            document.getElementById('contextRefresh').addEventListener('click', () => {
                this.loadFiles();
                this.hideContextMenu();
            });
        },
        
        showContextMenu: function(e, file = null) {
            e.preventDefault();
            e.stopPropagation();
            
            const contextMenu = document.getElementById('contextMenu');
            const fileOptions = document.getElementById('fileContextOptions');
            const folderOptions = document.getElementById('folderContextOptions');
            const emptyAreaOptions = document.getElementById('emptyAreaContextOptions');
            const extractZipOption = document.getElementById('contextExtractZip');
            
            // Ocultar todas las opciones primero
            fileOptions.classList.add('hidden');
            folderOptions.classList.add('hidden');
            emptyAreaOptions.classList.add('hidden');
            extractZipOption.style.display = 'none';
            
            this.contextMenuFile = file;
            
            if (file) {
                // Seleccionar el archivo automáticamente
                this.selectFileByName(file.name);
                
                if (file.isDirectory) {
                    folderOptions.classList.remove('hidden');
                } else {
                    fileOptions.classList.remove('hidden');
                    
                    // Mostrar opción de extraer ZIP solo para archivos ZIP
                    if (file.name.toLowerCase().endsWith('.zip')) {
                        extractZipOption.style.display = 'block';
                    }
                }
            } else {
                // Clic derecho en área vacía
                emptyAreaOptions.classList.remove('hidden');
                this.clearSelection();
            }
            
            // Posicionar el menú
            const rect = document.getElementById('filesList').getBoundingClientRect();
            let x = e.clientX;
            let y = e.clientY;
            
            // Ajustar posición si se sale de la pantalla
            const menuWidth = 180;
            const menuHeight = 300;
            
            if (x + menuWidth > window.innerWidth) {
                x = window.innerWidth - menuWidth - 10;
            }
            
            if (y + menuHeight > window.innerHeight) {
                y = window.innerHeight - menuHeight - 10;
            }
            
            contextMenu.style.left = x + 'px';
            contextMenu.style.top = y + 'px';
            contextMenu.classList.remove('hidden');
        },
        
        hideContextMenu: function() {
            document.getElementById('contextMenu').classList.add('hidden');
            this.contextMenuFile = null;
        },
        
        getRelativePath: function() {
            if (!this.contextMenuFile) return this.currentPath.join('/');
            return [...this.currentPath, this.contextMenuFile.name].join('/');
        },
        
        getFullPath: function() {
            const relativePath = this.getRelativePath();
            return `data/${relativePath}`;
        },
        
        copyToClipboard: function(text, message = 'Copiado al portapapeles') {
            navigator.clipboard.writeText(text).then(() => {
                this.showCopyNotification(message);
            }).catch(err => {
                console.error('Error al copiar:', err);
                // Fallback para navegadores que no soportan clipboard API
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                this.showCopyNotification(message);
            });
        },
        
        showCopyNotification: function(message) {
            const notification = document.getElementById('copyNotification');
            const text = document.getElementById('copyNotificationText');
            
            text.textContent = message;
            notification.classList.remove('translate-x-full');
            
            setTimeout(() => {
                notification.classList.add('translate-x-full');
            }, 2000);
        },
        
        selectFileByName: function(fileName) {
            const fileElements = document.querySelectorAll('#filesList [data-file]');
            fileElements.forEach(el => {
                const fileData = JSON.parse(el.dataset.file);
                if (fileData.name === fileName) {
                    this.selectFile(el, fileData);
                }
            });
        },
        
        showRenameModal: function() {
            if (!this.contextMenuFile) return;
            
            document.getElementById('renameInput').value = this.contextMenuFile.name;
            document.getElementById('renameModal').classList.remove('hidden');
            document.getElementById('renameInput').focus();
            document.getElementById('renameInput').select();
        },
        
        hideRenameModal: function() {
            document.getElementById('renameModal').classList.add('hidden');
            document.getElementById('renameInput').value = '';
        },
        
        renameFile: function() {
            const newName = document.getElementById('renameInput').value.trim();
            
            if (!newName || !this.contextMenuFile) {
                alert('Por favor, introduce un nombre válido');
                return;
            }
            
            if (newName === this.contextMenuFile.name) {
                this.hideRenameModal();
                return;
            }
            
            // Aquí implementarías la lógica de renombrado en el servidor
            // Por ahora solo mostramos un mensaje
            alert('Función de renombrado no implementada aún en el servidor');
            this.hideRenameModal();
        },
        
        updateServerStatus: function(connected, message = '') {
            const statusEl = document.getElementById('serverStatus');
            const dot = statusEl.querySelector('.w-2');
            const text = statusEl.querySelector('span');
            
            if (connected) {
                dot.className = 'w-2 h-2 rounded-full bg-green-500 mr-1';
                text.textContent = 'Conectado';
                text.className = 'text-green-600';
                this.serverConnected = true;
            } else {
                dot.className = 'w-2 h-2 rounded-full bg-red-500 mr-1';
                text.textContent = message || 'Desconectado';
                text.className = 'text-red-600';
                this.serverConnected = false;
            }
        },
        
        testConnection: function() {
            console.log('Probando conexión al servidor...');
            this.updateServerStatus(false, 'Probando...');
            
            fetch(`${this.apiUrl}/`)
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    }
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                })
                .then(data => {
                    console.log('Servidor conectado:', data);
                    this.updateServerStatus(true);
                    this.loadFiles();
                })
                .catch(error => {
                    console.error('Error de conexión:', error);
                    this.updateServerStatus(false, 'Error');
                    this.showConnectionError();
                });
        },
        
        showConnectionError: function() {
            document.getElementById('filesList').innerHTML = `
                <div class="p-6 text-center text-red-500">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <h3 class="font-semibold mb-2">No se puede conectar al servidor</h3>
                    <p class="text-sm mb-4">El servidor de archivos no está ejecutándose en el puerto 4002.</p>
                    <div class="text-xs text-gray-600 bg-gray-100 p-3 rounded">
                        <p class="font-semibold mb-2">Para solucionarlo:</p>
                        <ol class="text-left list-decimal list-inside space-y-1">
                            <li>Abre una terminal en: <code>src/modules/file_manager/</code></li>
                            <li>Ejecuta: <code>node server.js</code></li>
                            <li>O ejecuta: <code>start_server.bat</code></li>
                            <li>Luego haz clic en "Probar Conexión"</li>
                        </ol>
                    </div>
                    <button onclick="FileExplorer.testConnection()" class="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors duration-200">
                        Probar Conexión
                    </button>
                </div>
            `;
        },
        
        loadFiles: function() {
            if (!this.serverConnected) {
                this.testConnection();
                return;
            }
            
            const pathStr = this.currentPath.join('/');
            this.updateBreadcrumb();
            
            console.log('Cargando archivos para ruta:', pathStr);
            
            // Mostrar loading
            document.getElementById('filesList').innerHTML = `
                <div class="p-6 text-center text-gray-500">
                    <svg class="animate-spin h-6 w-6 mx-auto mb-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <p>Cargando archivos...</p>
                </div>
            `;
            
            // Construir URL
            const url = pathStr ? `${this.apiUrl}/files?path=${encodeURIComponent(pathStr)}` : `${this.apiUrl}/files`;
            console.log('URL de solicitud:', url);
            
            fetch(url)
                .then(response => {
                    console.log('Respuesta del servidor:', response.status, response.statusText);
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Datos recibidos:', data);
                    if (data.success) {
                        this.renderFiles(data.files || []);
                        document.getElementById('fileCount').textContent = `${data.files?.length || 0} elementos`;
                        this.updateServerStatus(true);
                    } else {
                        this.showError(data.error || 'Error al cargar archivos');
                    }
                })
                .catch(error => {
                    console.error('Error al cargar archivos:', error);
                    this.updateServerStatus(false, 'Error');
                    this.showError('Error de conexión: ' + error.message);
                });
        },
        
        renderFiles: function(files) {
            const container = document.getElementById('filesList');
            
            if (files.length === 0) {
                container.innerHTML = `
                    <div class="p-6 text-center text-gray-500">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 mx-auto mb-3 text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" />
                        </svg>
                        <p>Esta carpeta está vacía</p>
                    </div>
                `;
                
                // Agregar evento de clic derecho al área vacía
                container.addEventListener('contextmenu', (e) => this.showContextMenu(e));
                return;
            }
            
            // Ordenar: directorios primero, luego archivos
            files.sort((a, b) => {
                if (a.isDirectory && !b.isDirectory) return -1;
                if (!a.isDirectory && b.isDirectory) return 1;
                return a.name.localeCompare(b.name);
            });
            
            container.innerHTML = '';
            
            files.forEach(file => {
                const fileEl = document.createElement('div');
                fileEl.className = 'flex items-center justify-between p-2 hover:bg-gray-50 cursor-pointer border-b last:border-b-0 transition-colors duration-150';
                fileEl.dataset.file = JSON.stringify(file);
                
                const date = new Date(file.modified || file.mtime);
                const formattedDate = date.toLocaleDateString('es-ES');
                const formattedSize = file.isDirectory ? '-' : this.formatFileSize(file.size);
                
                fileEl.innerHTML = `
                    <div class="flex items-center flex-1 min-w-0">
                        <span class="mr-2 flex-shrink-0 ${file.isDirectory ? 'text-blue-500' : this.getFileIconColor(file.name)}">
                            ${file.isDirectory ? 
                                '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" /></svg>' : 
                                '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 712-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /></svg>'
                            }
                        </span>
                        <span class="font-medium text-gray-900 truncate">${file.name}</span>
                    </div>
                    <div class="flex items-center space-x-3 text-xs text-gray-500 flex-shrink-0">
                        <span class="w-12 text-right">${formattedSize}</span>
                        <span class="w-20 text-right">${formattedDate}</span>
                    </div>
                `;
                
                fileEl.addEventListener('click', () => this.selectFile(fileEl, file));
                fileEl.addEventListener('dblclick', () => {
                    if (file.isDirectory) {
                        this.navigateToFolder(file.name);
                    } else {
                        this.viewFile();
                    }
                });
                
                // Agregar evento de clic derecho
                fileEl.addEventListener('contextmenu', (e) => this.showContextMenu(e, file));
                
                container.appendChild(fileEl);
            });
            
            // Agregar evento de clic derecho al contenedor para área vacía
            container.addEventListener('contextmenu', (e) => {
                if (e.target === container) {
                    this.showContextMenu(e);
                }
            });
        },
        
        selectFile: function(element, file) {
            // Remover selección previa
            document.querySelectorAll('#filesList .bg-blue-100').forEach(el => {
                el.classList.remove('bg-blue-100');
            });
            
            // Marcar como seleccionado
            element.classList.add('bg-blue-100');
            this.selectedFile = file;
            
            // Mostrar información del archivo
            document.getElementById('selectedFileName').textContent = file.name;
            document.getElementById('selectedFileSize').textContent = file.isDirectory ? 'Carpeta' : this.formatFileSize(file.size);
            document.getElementById('selectedFileInfo').classList.remove('hidden');
            
            // Habilitar/deshabilitar botones
            const isFile = !file.isDirectory;
            const isZipFile = isFile && file.name.toLowerCase().endsWith('.zip');
            
            document.getElementById('viewFileBtn').disabled = !isFile;
            document.getElementById('downloadFileBtn').disabled = !isFile;
            document.getElementById('extractZipBtn').disabled = !isZipFile;
            document.getElementById('deleteFileBtn').disabled = false;
        },
        
        navigateToFolder: function(folderName) {
            this.currentPath.push(folderName);
            this.loadFiles();
            this.clearSelection();
        },
        
        navigateToHome: function() {
            this.currentPath = [];
            this.loadFiles();
            this.clearSelection();
        },
        
        updateBreadcrumb: function() {
            const breadcrumb = document.getElementById('breadcrumb');
            
            if (this.currentPath.length === 0) {
                breadcrumb.innerHTML = '';
                return;
            }
            
            let html = '';
            this.currentPath.forEach((segment, index) => {
                html += '<span class="mx-1">/</span>';
                if (index < this.currentPath.length - 1) {
                    html += `<button class="text-blue-600 hover:text-blue-800 transition-colors duration-200" data-index="${index}">${segment}</button>`;
                } else {
                    html += `<span class="text-gray-600">${segment}</span>`;
                }
            });
            
            breadcrumb.innerHTML = html;
            
            // Agregar eventos a los enlaces
            breadcrumb.querySelectorAll('button').forEach(btn => {
                btn.addEventListener('click', () => {
                    const index = parseInt(btn.dataset.index);
                    this.currentPath = this.currentPath.slice(0, index + 1);
                    this.loadFiles();
                    this.clearSelection();
                });
            });
        },
        
        clearSelection: function() {
            this.selectedFile = null;
            document.getElementById('selectedFileInfo').classList.add('hidden');
            document.getElementById('viewFileBtn').disabled = true;
            document.getElementById('downloadFileBtn').disabled = true;
            document.getElementById('extractZipBtn').disabled = true;
            document.getElementById('deleteFileBtn').disabled = true;
            
            document.querySelectorAll('#filesList .bg-blue-100').forEach(el => {
                el.classList.remove('bg-blue-100');
            });
        },
        
        showCreateFolderModal: function() {
            document.getElementById('folderModal').classList.remove('hidden');
            document.getElementById('folderNameInput').focus();
        },
        
        hideCreateFolderModal: function() {
            document.getElementById('folderModal').classList.add('hidden');
            document.getElementById('folderNameInput').value = '';
        },
        
        createFolder: function() {
            const folderName = document.getElementById('folderNameInput').value.trim();
            
            if (!folderName) {
                alert('Por favor, introduce un nombre para la carpeta');
                return;
            }
            
            if (!/^[a-zA-Z0-9_\-\s]+$/.test(folderName)) {
                alert('El nombre de la carpeta solo puede contener letras, números, guiones y espacios');
                return;
            }
            
            const pathStr = this.currentPath.join('/');
            const url = `${this.apiUrl}/create-folder`;
            
            fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    path: pathStr,
                    name: folderName
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    this.hideCreateFolderModal();
                    this.loadFiles();
                } else {
                    alert('Error al crear la carpeta: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error de conexión: ' + error.message);
            });
        },
        
        handleFileUpload: function(files) {
            if (!files || files.length === 0) return;
            
            const formData = new FormData();
            const pathStr = this.currentPath.join('/');
            
            formData.append('path', pathStr);
            for (let i = 0; i < files.length; i++) {
                formData.append('files', files[i]);
            }
            
            fetch(`${this.apiUrl}/upload`, {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    this.loadFiles();
                    document.getElementById('fileInput').value = '';
                } else {
                    alert('Error al subir archivos: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error de conexión: ' + error.message);
            });
        },
        
        viewFile: function() {
            const file = this.contextMenuFile || this.selectedFile;
            if (!file || file.isDirectory) return;
            
            const filePath = [...this.currentPath, file.name].join('/');
            document.getElementById('previewTitle').textContent = file.name;
            document.getElementById('previewModal').classList.remove('hidden');
            
            const extension = file.name.split('.').pop().toLowerCase();
            
            if (['png', 'jpg', 'jpeg', 'gif', 'svg'].includes(extension)) {
                document.getElementById('previewContent').innerHTML = `
                    <div class="flex items-center justify-center">
                        <img src="${this.apiUrl}/view?path=${encodeURIComponent(filePath)}" class="max-w-full max-h-[60vh]" alt="${file.name}">
                    </div>
                `;
            } else if (['txt', 'csv', 'tsv', 'fna', 'faa', 'gff', 'gff3', 'vcf', 'log'].includes(extension)) {
                document.getElementById('previewContent').innerHTML = `
                    <div class="text-center p-4">
                        <svg class="animate-spin h-8 w-8 mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <p>Cargando contenido...</p>
                    </div>
                `;
                
                fetch(`${this.apiUrl}/file-content?path=${encodeURIComponent(filePath)}`)
                    .then(response => response.text())
                    .then(content => {
                        document.getElementById('previewContent').innerHTML = `
                            <pre class="text-sm whitespace-pre-wrap overflow-auto p-4 bg-gray-50 rounded max-h-[60vh]">${this.escapeHtml(content)}</pre>
                        `;
                    })
                    .catch(error => {
                        document.getElementById('previewContent').innerHTML = `
                            <div class="text-center p-4 text-red-500">
                                <p>Error al cargar el contenido: ${error.message}</p>
                            </div>
                        `;
                    });
            } else {
                document.getElementById('previewContent').innerHTML = `
                    <div class="text-center p-8">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto mb-4 text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 712-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        <p class="text-gray-500 mb-4">Este tipo de archivo no se puede previsualizar</p>
                        <button onclick="FileExplorer.downloadFile()" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition-colors duration-200">
                            Descargar archivo
                        </button>
                    </div>
                `;
            }
        },
        
        hidePreviewModal: function() {
            document.getElementById('previewModal').classList.add('hidden');
            document.getElementById('previewContent').innerHTML = '';
        },
        
        downloadFile: function() {
            const file = this.contextMenuFile || this.selectedFile;
            if (!file || file.isDirectory) return;
            
            const filePath = [...this.currentPath, file.name].join('/');
            window.location.href = `${this.apiUrl}/download?path=${encodeURIComponent(filePath)}`;
        },
        
        deleteFile: function() {
            const file = this.contextMenuFile || this.selectedFile;
            if (!file) return;
            
            const itemType = file.isDirectory ? 'carpeta' : 'archivo';
            if (!confirm(`¿Estás seguro de que quieres eliminar ${itemType} "${file.name}"?`)) {
                return;
            }
            
            const filePath = [...this.currentPath, file.name].join('/');
            
            fetch(`${this.apiUrl}/delete`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ path: filePath })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    this.loadFiles();
                    this.clearSelection();
                } else {
                    alert('Error al eliminar: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error de conexión: ' + error.message);
            });
        },
        
        showError: function(message) {
            document.getElementById('filesList').innerHTML = `
                <div class="p-6 text-center text-red-500">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 mx-auto mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <p class="text-sm">${message}</p>
                    <button onclick="FileExplorer.testConnection()" class="mt-2 bg-blue-500 text-white px-3 py-1 rounded text-xs hover:bg-blue-600 transition-colors duration-200">
                        Reintentar
                    </button>
                </div>
            `;
        },
        
        formatFileSize: function(bytes) {
            if (bytes === 0) return '0 B';
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        },
        
        getFileIconColor: function(filename) {
            const extension = filename.split('.').pop().toLowerCase();
            const colorMap = {
                'fna': 'text-green-600',
                'faa': 'text-green-600',
                'fastq': 'text-purple-600',
                'gbk': 'text-blue-600',
                'gbff': 'text-blue-600',
                'gff': 'text-orange-600',
                'gff3': 'text-orange-600',
                'bam': 'text-blue-600',
                'sam': 'text-blue-600',
                'vcf': 'text-red-600',
                'txt': 'text-gray-600',
                'csv': 'text-blue-600',
                'tsv': 'text-blue-600',
                'png': 'text-purple-600',
                'jpg': 'text-purple-600',
                'jpeg': 'text-purple-600',
                'zip': 'text-yellow-600'  // Destacar archivos ZIP
            };
            return colorMap[extension] || 'text-gray-600';
        },
        
        escapeHtml: function(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        },
        
        // Método para obtener la ruta actual (útil para otros componentes)
        getCurrentPath: function() {
            return this.currentPath.join('/');
        },
        
        // Método para establecer una ruta específica
        setPath: function(path) {
            this.currentPath = path ? path.split('/').filter(p => p) : [];
            this.loadFiles();
            this.clearSelection();
        },
        
        showExtractZipModal: function() {
            const file = this.selectedFile || this.contextMenuFile;
            if (!file || !file.name.toLowerCase().endsWith('.zip')) {
                alert('Por favor, selecciona un archivo ZIP');
                return;
            }
            
            // Mostrar el nombre del archivo en el modal
            document.querySelector('#extractZipModal h3').textContent = `Extraer: ${file.name}`;
            document.getElementById('extractZipModal').classList.remove('hidden');
        },
        
        hideExtractZipModal: function() {
            document.getElementById('extractZipModal').classList.add('hidden');
        },
        
        extractZip: function() {
            const option = document.querySelector('input[name="extractOption"]:checked').value;
            if (option === 'same') {
                this.extractZipSameFolder();
            } else if (option === 'folder') {
                this.extractZipNewFolder();
            }
        },
        
        extractZipSameFolder: function() {
            const file = this.selectedFile || this.contextMenuFile;
            if (!file) return;
            
            const filePath = [...this.currentPath, file.name].join('/');
            
            // Mostrar indicador de carga
            const confirmBtn = document.getElementById('confirmExtractBtn');
            const originalText = confirmBtn.innerHTML;
            confirmBtn.disabled = true;
            confirmBtn.innerHTML = `
                <svg class="animate-spin h-4 w-4 mr-2 inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Extrayendo...
            `;
            
            fetch(`${this.apiUrl}/extract-zip`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    path: filePath,
                    extractToFolder: false
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    this.hideExtractZipModal();
                    this.loadFiles();
                    this.showCopyNotification(`✅ ZIP extraído: ${data.extractedCount} archivos`);
                } else {
                    alert('Error al extraer ZIP: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error de conexión: ' + error.message);
            })
            .finally(() => {
                // Restaurar botón
                confirmBtn.disabled = false;
                confirmBtn.innerHTML = originalText;
            });
        },
        
        extractZipNewFolder: function() {
            const file = this.selectedFile || this.contextMenuFile;
            if (!file) return;
            
            const filePath = [...this.currentPath, file.name].join('/');
            
            // Mostrar indicador de carga
            const confirmBtn = document.getElementById('confirmExtractBtn');
            const originalText = confirmBtn.innerHTML;
            confirmBtn.disabled = true;
            confirmBtn.innerHTML = `
                <svg class="animate-spin h-4 w-4 mr-2 inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Extrayendo...
            `;
            
            fetch(`${this.apiUrl}/extract-zip`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    path: filePath,
                    extractToFolder: true
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    this.hideExtractZipModal();
                    this.loadFiles();
                    this.showCopyNotification(`✅ ZIP extraído en carpeta: ${data.extractedCount} archivos`);
                } else {
                    alert('Error al extraer ZIP: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error de conexión: ' + error.message);
            })
            .finally(() => {
                // Restaurar botón
                confirmBtn.disabled = false;
                confirmBtn.innerHTML = originalText;
            });
        }
    };
    
    // Inicializar
    FileExplorer.init();
});
</script>